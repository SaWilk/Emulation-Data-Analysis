% Data Analysis Pursuit-Tracking and Pursuit-Occlusion Paradigm
% Emulation pilot study 2021

% This script contains: 
% TF and CBPT plots for new split time intervals in task A
% only for contrast: const/rand1 in A, occl/nonoccl in B
% and changed eletrode labels to match neighbour/layout file (upper)

% Adriana BÃ¶ttcher
% 29.09.2022

%%
clc;
clearvars;

% load fieldtrip toolbox
addpath('R:\AG-Beste-Orga\Skripts\Toolbox\fieldtrip-20210212\');
ft_defaults;

% load custom ft toolbox
addpath('R:\AG-Beste-Orga\Skripts\Fieldtrip\ft_mmcustom');

% load local EEG configuration (electrodes, neighbours, layout)
load fieldtrip_EEG_KJP_elec_61;
load fieldtrip_EEG_KJP_layout_61;
load fieldtrip_EEG_KJP_neighbours_61;

% load IDs of included subjects
load subjects;

subjects     = subjects;
subjects(18)    = [];

% conditions
conds_A = {'const', 'rand1', 'rand2'};
conds_B = {'occl', 'nonoccl'};

% initialize input and output folder
inputpath_A     = 'R:\AG-Beste-Studien\Emulation\06_analysis\Emulation-Data-Output\09_segments_A_TFT';
inputpath_B     = 'R:\AG-Beste-Studien\Emulation\06_analysis\Emulation-Data-Output\09_segments_B_TFT';
inputpath_CBPT  = 'R:\AG-Beste-Studien\Emulation\06_analysis\Emulation-Data-Output\10_CBPT';

%% load data

% GAVs
load([inputpath_A filesep 'freq_GAV_A']);
load([inputpath_B filesep 'freq_GAV_B']);

% CBPT results
load([inputpath_CBPT filesep 'CBPT']);
load([inputpath_CBPT filesep 'CBPT_avg']);

%% lims
theta_lims   = [4 7];
alpha_lims   = [8 12];
beta_lims    = [13 30];
all_freq     = [2 20];

timelim_A = [0 3];
timelim_B = [0 2];

calpha  = 0.001;
alpha   = 0.001;

%% change electrode labels to match neighbour and layout file

freq_GAV_A.const.label = upper(freq_GAV_A.const.label);
freq_GAV_A.rand1.label = upper(freq_GAV_A.rand1.label);
freq_GAV_A.rand2.label = upper(freq_GAV_A.rand2.label);

freq_GAV_B.occl.label = upper(freq_GAV_B.occl.label);
freq_GAV_B.nonoccl.label = upper(freq_GAV_B.nonoccl.label);

%% reduce trial length according to condition
% rand1: 500-3000
% rand2/const: 0-2500
% then, perform CBPT on whole interval (cfg.latency = 'all')

freq_GAV_A_after_500 = {};

conds_A = {'rand1' 'const' 'rand2'};

timelims_rand1 = [0.5 3];
timelims_other = [0 2.5];

for cond = 1:size(conds_A, 2)

    % set timelims according to condition
    if strcmp(conds_A{cond}, 'rand1')
        timelims = timelims_rand1;
    else
        timelims = timelims_other;
    end

    % copy original structure
    freq_GAV_A_after_500.(conds_A{cond}) = freq_GAV_A.(conds_A{cond});
   
    % reduce time window
    % get start and end index
    start_ind = find(freq_GAV_A_after_500.(conds_A{cond}).time > timelims(1), 1, 'first');
    end_ind = find(freq_GAV_A_after_500.(conds_A{cond}).time > timelims(2), 1, 'first');
    % apply time window to time info and power spectrum
    freq_GAV_A_after_500.(conds_A{cond}).time      = freq_GAV_A_after_500.(conds_A{cond}).time(:, start_ind:end_ind);
    freq_GAV_A_after_500.(conds_A{cond}).powspctrm = freq_GAV_A_after_500.(conds_A{cond}).powspctrm(:, :, start_ind:end_ind);

end

% new dataframe for: 0-500 ms (same for all conditions)

freq_GAV_A_until_500 = {};

conds_A = {'rand1' 'const' 'rand2'};

timelims = [0 0.5];

for cond = 1:size(conds_A, 2)

    % copy original structure
    freq_GAV_A_until_500.(conds_A{cond}) = freq_GAV_A.(conds_A{cond});
   
    % reduce time window
    % get start and end index
    start_ind = find(freq_GAV_A_until_500.(conds_A{cond}).time > timelims(1), 1, 'first');
    end_ind = find(freq_GAV_A_until_500.(conds_A{cond}).time > timelims(2), 1, 'first');
    % apply time window to time info and power spectrum
    freq_GAV_A_until_500.(conds_A{cond}).time      = freq_GAV_A_until_500.(conds_A{cond}).time(:, start_ind:end_ind);
    freq_GAV_A_until_500.(conds_A{cond}).powspctrm = freq_GAV_A_until_500.(conds_A{cond}).powspctrm(:, :, start_ind:end_ind);

end

%% calculate differences for plotting contrasts
% now with two time windows & only for const vs. rand1

freq_GAV_A_after_500.diff_const_rand1 = freq_GAV_A_after_500.const;
freq_GAV_A_after_500.diff_const_rand1.powspctrm = freq_GAV_A_after_500.const.powspctrm - freq_GAV_A_after_500.rand1.powspctrm;

freq_GAV_A_until_500.diff_const_rand1 = freq_GAV_A_until_500.const;
freq_GAV_A_until_500.diff_const_rand1.powspctrm = freq_GAV_A_until_500.const.powspctrm - freq_GAV_A_until_500.rand1.powspctrm;

freq_GAV_B.diff_occl_nonoccl = freq_GAV_B.nonoccl;
freq_GAV_B.diff_occl_nonoccl.powspctrm = freq_GAV_B.occl.powspctrm - freq_GAV_B.nonoccl.powspctrm;

% save freq GAV files
save([inputpath_A filesep 'freq_GAV_A_split_window'], "freq_GAV_A");
save([inputpath_B filesep 'freq_GAV_B_new'], "freq_GAV_B");

%% multiplots for contrasts, A, split interval

% after 500 ms
cfg         = [];
cfg.layout  = lay;
cfg.ylim    = [4 30];
cfg.xlim = timelims_other;
cfg.zlim = 'maxmin';
cfg.title = 'Task A: avg power const - avg power rand1, after 500';
ft_multiplotTFR(cfg, freq_GAV_A_after_500.diff_const_rand1); 
colorbar;

cfg.ylim    = theta_lims;
ft_topoplotTFR(cfg, freq_GAV_A_after_500.diff_const_rand1);
colorbar;


% 0-500 ms
cfg         = [];
cfg.layout  = lay;
cfg.ylim    = [4 30];
cfg.xlim = [0 0.5];
cfg.zlim = 'maxmin';
cfg.title = 'Task A: avg power const - avg power rand1, until 500';
ft_multiplotTFR(cfg, freq_GAV_A_until_500.diff_const_rand1); 
colorbar;

cfg.ylim    = theta_lims;
ft_topoplotTFR(cfg, freq_GAV_A_until_500.diff_const_rand1);
colorbar;

cfg.ylim    = alpha_lims;
ft_topoplotTFR(cfg, freq_GAV_A_until_500.diff_const_rand1);
colorbar;

cfg.ylim    = beta_lims;
ft_topoplotTFR(cfg, freq_GAV_A_until_500.diff_const_rand1);
colorbar;


%% plots task B

% after 500 ms
cfg         = [];
cfg.layout  = lay;
cfg.ylim    = [4 30];
cfg.xlim = [0 2];
cfg.zlim = 'maxmin';
cfg.title = ('Task A: avg power occluded - avg power non_occluded', '');
ft_multiplotTFR(cfg, freq_GAV_B.diff_occl_nonoccl); 
colorbar;
